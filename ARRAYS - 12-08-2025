1) Power of 2:

class Solution {
    public boolean isPowerOfTwo(int n) {
        if (n <= 0) return false; 

        for (int i = 0; Math.pow(2, i) <= n; i++) {
            int value = (int) Math.pow(2, i);
            if (value == n) {
                return true;
            }
        }
        return false;
    }
}


===============================================================================================================================================================================================================================================================================

2) mISSING NUMBER

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int value = n * (n+1)/2;
        int sum = 0;
        int result = 0;
        for(int i = 0; i < n ; i++){
            sum = sum + nums[i];
        }
        result = value - sum;
        return result;
    }
}

XOR way of solving things:     // to find missing numbers = find xor of values from 0 to n and then xor it with all the values of the array [nums]

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int xor = 0;
        for(int i = 0 ; i <=n ; i++){
            xor = xor ^ i;
        }

        for(int i = 0; i<nums.length; i++){
            xor = xor^nums[i];
        }

        return xor;

    }
}

===============================================================================================================================================================================================================================================================================

3) Duplicate numbers:

class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int val = 0;
        int result = 0;
        for (int i =0 ; i<nums.length -1; i++){
            val = nums[i] ^ nums[i + 1];
            if (val == 0){
                result = nums[i];
            }
        }
    return result;
    }
}
