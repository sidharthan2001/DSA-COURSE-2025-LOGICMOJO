1) Power of 2:

class Solution {
    public boolean isPowerOfTwo(int n) {
        if (n <= 0) return false; 

        for (int i = 0; Math.pow(2, i) <= n; i++) {
            int value = (int) Math.pow(2, i);
            if (value == n) {
                return true;
            }
        }
        return false;
    }
}


===============================================================================================================================================================================================================================================================================

2) mISSING NUMBER

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int value = n * (n+1)/2;
        int sum = 0;
        int result = 0;
        for(int i = 0; i < n ; i++){
            sum = sum + nums[i];
        }
        result = value - sum;
        return result;
    }
}

XOR way of solving things:     // to find missing numbers = find xor of values from 0 to n and then xor it with all the values of the array [nums]

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int xor = 0;
        for(int i = 0 ; i <=n ; i++){
            xor = xor ^ i;
        }

        for(int i = 0; i<nums.length; i++){
            xor = xor^nums[i];
        }

        return xor;

    }
}

===============================================================================================================================================================================================================================================================================

3) Duplicate numbers:

class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int val = 0;
        int result = 0;
        for (int i =0 ; i<nums.length -1; i++){
            val = nums[i] ^ nums[i + 1];
            if (val == 0){
                result = nums[i];
            }
        }
    return result;
    }
}

Find duplicate using hashmap:

class Solution {
    public int findDuplicate(int[] nums) {
        
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();

        for (int i = 0; i < nums.length ; i++){
            if(freq.containsKey(nums[i])){
                freq.put(nums[i], nums[i] + 1 );
            }
            else{
                freq.put(nums[i], 1);
            }
        }
        int val = 0 ;
        for (int num : nums){
            int count = freq.get(num);
            if (count > 1){
                val= num;
            }
        }
    return val;
    }
}

                            (OR)

class Solution {
    public int findDuplicate(int[] nums) {
        
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        int val = 0 ;
        for (int i = 0; i < nums.length ; i++){
            if(freq.containsKey(nums[i])){
                freq.put(nums[i], freq.get(nums[i]) + 1 );
                int count = freq.get(nums[i]);
                if (count > 1){
                    val = nums[i];
                }
            }
            else{
                freq.put(nums[i], 1);
            }
        }
        
    return val;
    }
}



======================================================================================================================================================================================================================================

4) Find odd occurences:

import java.util.* ;
import java.io.*; 
public class Solution 
{
	public static int findOdd(int[] arr, int n) 
    {
		Map<Integer, Integer> freq = new HashMap<>();

		for (int i = 0 ; i < arr.length ; i++){
			if(freq.containsKey(arr[i])){
				freq.put(arr[i], freq.get(arr[i]) + 1);
			}
			else{
				freq.put(arr[i], 1);
			}
		}

		for(int i : freq.keySet()){
			int count = freq.get(i);
			if (count%2 != 0){
				return i;
			}
		}
	return -1;
	}
}


						(OR)


import java.util.* ;
import java.io.*; 
public class Solution 
{
	public static int findOdd(int[] arr, int n) 
    {
		int xor = 0;

		for(int i = 0; i < arr.length; i++){
			xor = xor ^ arr[i];
		}

		return xor;
	}
}


======================================================================================================================================================================================================================================

5) Binary Search:


class Solution {
    public int search(int[] nums, int target) {
        
        int low = 0;
        int high = nums.length-1;
        
        if (nums.length == 0){
            return -1;
        }

        while(low <= high){
            // int mid = low + (high - low)/2;
            int mid = (low + high)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if (target < nums[mid]){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return -1;
    }
}


							(OR)



static int binarySearchRec(int[] arr, int target, int l, int r) {
        if(l>r) return -1; //base case or terminating condition

        int mid = l+(r-l)/2;

        if(arr[mid]==target)
            return mid; //element found

        if(target < arr[mid])
            return binarySearchRec(arr, target, l, mid-1); //reducing right boundary

        return binarySearchRec(arr, target, mid+1, r); //reducing left boundary
}
