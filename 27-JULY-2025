27-JULY-2025

1) TO FIND GCD OF TWO NUMBERS:
=============================

Using for loop;
###############

public class Main
{
	public static void main(String[] args) {
	   int a = 1, b = 1;
	   int mini = 0;
	   if (a < b){
	       mini = a;
	   }
	   else{
	       mini = b;
	   }
	   int maxi = 0;
	   for (int i = mini; i >= 1; i--){
	       if(a%i == 0 && b%i ==0){
	           maxi = Math.max(maxi,i);
	       }
	   }
	   System.out.println(maxi);
	}
}

Using Euclidean method"
######################

public class Main
{
    public static int gcd(int a, int b){
        if (b == 0){
            return a;
        }
        else if (a == 0){
            return b;
        }
        
        if (a>b){
            return gcd(b, a%b);
        }
        else{
            return gcd(a, b%a);
        }
    }
    
	public static void main(String[] args) {
	   int a = 18, b = 12;
	   int result = gcd(a,b);
	   System.out.println(result);
	}
}


Using OLD euclidean method by subtraction:
##########################################

public class Main
{
    public static int gcd(int a, int b){
        if (a == b){
            return a;
        }
        
        if (a > b){
            return gcd(a-b, b);
        }
        else{
            return gcd(a, b-a);
        }
    }
    
	public static void main(String[] args) {
	   int a = 12, b = 18;
	   int result = gcd(a,b);
	   System.out.println(result);
	}
}


==============================================================================================================================================================================================================================

2) Solve binary to deimal converter

public class Main
{
	public static void main(String[] args) {
		int sum = 0 ;
		int number = 1001000;
		int power = 0;
		while (number!= 0){
		    int rem = number%10;
		    sum = sum + rem * (int)Math.pow(2,power);
		    power = power + 1;
		    number = number / 10;
		}
	    System.out.println(sum);
	}
}


==============================================================================================================================================================================================================================


3) LCM of an array of number:

public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 8, 3};
        int max = numbers[0];
        
        for(int i = 1; i < numbers.length ; i++){
            if (numbers[i] > max){
                max = numbers[i];
            }
        }
        
        
        
        int lcm = max;
        while(true){
            boolean value = true;
            for(int i = 0 ; i < numbers.length ; i++){
                if (lcm%numbers[i] != 0){
                    value = false;
                    break;
                }
            } 
                
            if (value){
                break;
            }
                
            lcm++;
            
            
        }
        
        System.out.println(lcm);
    }
}

OTHER WAYS USING EQUATION:   [LCM of two numbers = a*b/GCD(a,b)]
##########################

public class Main {
    
    public static int gcd(int a, int b) {
        while(b == 0){
            return a;
        }
        
        return gcd(b,a%b);
    }
    
   
    public static int lcm(int a, int b) {
        return (a * b) / gcd(a, b); 
    }
    
    public static void main(String[] args) {
        int[] numbers = {1, 2, 8, 3};  
        int result = numbers[0];  
        
    
        for (int i = 1; i < numbers.length; i++) {
            result = lcm(result, numbers[i]);
        }
        
        System.out.println(result); 
    }
}


=============================================================================================================================================================================================================================

4) To find all prime numbers within N:
   ###################################

Naive Approach:
===============

public class Main
{
	public static void main(String[] args) {
		int number = 50;
		
		for (int i = 2 ; i < number; i++){
		    
		    boolean isprime = true;
		    
		    for(int j = 2; j < i ; j++){
		        if (i%j == 0){
		            isprime = false;
		            break;
		        }
		    }
		    
		    if (isprime){
		        System.out.println(i);
		    }
		}
	}
}





